Gonna go ahead and make some UserCards.
Nah. fuck it. no UserCards. its for the people!!!

AWS instead of Heroku? Needs to be dank

Let's also friggin set up a way for people to submit card ideas and shit.
and people can vote and comment on them.
and subposts for image art to go along with proposed cards that can also be voted on.
dank.
like a decentralized card playing game.

Probably gonna have to have a backend for game and like game transactions/history.

Not sure if you can have like post_id for comments belong to cardposts and cardpostimageposts ??
... or like how exactly to implement it. here goes nothing
---StackOverflow dude recommended an implementation of polymorphisms. gonna try that

therefore might want to change cardpostcomments to just comments
but maybe not, so gonna leave it for now
nah fuck it im changing it

wanted to change up and downvotes to default: 0 instead of null: false. I have both now but I think its chill
so im just not gonna make a model validation for presence

not worrying about replies having replies (yet at least)

https://gist.github.com/runemadsen/1242485 is a good article on reverse polymorphism,
but for now i'm just gonna have a user have many imageposts and cardposts separately :/

funny... i used 'be annotate' to kinda check buildtime errors. lol. p tite.

7/28 3:26 PM -- time to test basic models
—Users p chillin
—Cards p chillin
--deck and deck <-> users p chillin
--deck<->cards and deckCards p chillin
...
--its all good

Check card and cardpost validation to update types (now called card_type). Gonna start off with some basic ones.
‘Minion’ means just a plain old minion. might add card_types to db later.
Samesies for decks and classes ('warlock','mage',...)

might wanna make validation that decks have 30 cards. also might not need a deckcard model.

so "class" and "type" for column names are no-no's

time for routes:
  cards:
    you should be able to see all cards.

no index in image post routes because that will be in card post route

these routes seem really like subjective in terms of how to set them up. May come back to them

nested routes have new and edit and show (if applicable)

deleting a lot of nested routes:
    " resources :image_posts, only: [:create] do
      resources :comments, only: [:new, :edit]
    end
resources :comments, only: [:create, :update, :destroy] do #destroying a comment may need fuxing with replies
      resources :replies, only: [:new, :edit]
    end
resources :users, only: [:create, :new, :show] do
      resources :decks, only: [:new, :show, :edit]
    end
resources :card_posts, path: "posts", only: [:new, :create, :index, :show] do #maybe add destroy; no edit tho
      resources :image_posts, only: [:new, :show]
      resources :comments, only: [:new, :edit]
    end "

holy shit im spending way too long just thinking about fuggin routes m8

omg its controller time. then views. then fuggin frontend.

ALSO BATTLES TABLE TO DO ACTUAL BATTLES. I SHOULD PROB DO THAT FIRST. --p done
AND WINS AND LOSSES FOR USERS. --fixed
and maybe figure out limiting deck to 30 in backend.
also allow 2 of same cards in a deck -- FIXED

creating battles: might wanna split into two battle sides-- done
might wanna have a transaction history model later

FIELD WILL HAVE BATTLECARDS BC ENCHANTMENTS N SHIT
SO WILL BATTLEDECK AND HAND FOR THE SAME SHIT

might wanna just go ahead and publish shit before battles so that people can start making cards n shit

i like upvotes and downvotes. and i like a 1-10 scale. maybe a happy medium is a -5 -> 5 scale.
kinda getting ahead of myself here

got a few one to one relationships in battlesides. i wonder if in a one-to-one it matters which one is belongs_to
and which one is has_one

something about dependent: :destroy

got a lotta data being stored. might need to adapt later on

later: make a GRAVEYARD model so that you can bring cards back from the dead

now that i got the battle stuff set up, im gonna focus on the other stuff to crowdsource card ideas before the game is made

right now users/1/decks/1 json will say invalid credentials, but users/1 will show the deck's content...
also it's 10:39PM, so break time i think... --day2: removed decks from users partial. others shouldn't even see how many decks you have or their names. could give shit away.

DAY 2
there's a bench icon in the tab (header) (from benchbnb probs obvs)

also, time to do posts views/controllers and such. here we go

prolly has to be CardPostsController, not PostsController duh

prolly wanna make a cardposts index. that would be interesting and straightforward for the user.

CONTROLLERS:
cardposts- done


shit... might wanna make comments more flexible
i.e. like no replies. just comments can be on comments too.

maybe also a 1-10 rating and you can sort by net votes, or by average rating.

working on ImagePostsController. potentially will have a lot to test
--REMEMBER TO TEST NEW/CREATE
(CANT REALLY DO THAT YET)

i'll probably need to do some shit so that people can't upvote/downvote a post multiple times

gonna remove replies aaannndd i think thats it.
then gonna go run at the gym a bit.
and first thing to figure out when im back is probably upvote/downvote stuff

hokay. now i can test with ajax. session and users good.
hopefully Card posts are good.
posting is good.
still a lil confused about voting.
yet to check posting of image_posts and comments but i feel good about em
also havent checked deletion or update (of comments)

alright. lets do votes and check the other stuff then dey go.
models seem chillin.
lets change up the routes a tiny bit.

views:::
cardposts show will have comments
and link to image_posts index
image_posts index will have cardpost stats
so will image_post show

aight.
OFFISH CHECKLIST: (mostly for update, post, delete)
  already donezo:
    users, sessions
  card_posts:
    - Post XX
  image_posts:
    - Post XX
  comments:
    - Post
    - Update
    - Delete
  decks:
    - Post
    - Update
  scales:
    - Post
    - Update
    - Delete
  votes:
    - Post
    - Update
    - Delete

hokay but like i could also develop this while making of the frontend.
like #apiutil u know?
